{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n//   console.log(action);\n//   return next(action);\n// };\nconst configureStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware\n  /* loggerMiddleware */\n  ];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // ( store as SagaStore ).sagaTask = sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/Admins/Desktop/campaign-viewer/front/store/configureStore.ts"],"names":["createWrapper","applyMiddleware","createStore","compose","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","context","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAAkBA,aAAlB,QAAkD,oBAAlD;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAA6D,OAA7D;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAA2C,YAA3C;AACA,OAAOC,OAAP,MAAmC,aAAnC;AACA,OAAOC,QAAP,MAAqB,UAArB;;AASA;AACA;AACA;AACA;AAEA,MAAMC,cAAoC,GAAKC,OAAF,IAAwB;AACnE,QAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AACA,QAAMM,WAAW,GAAG,CAACD;AAAgB;AAAjB,GAApB;AACA,QAAME,QAAQ,GAAG,QACbT,OAAO,CAACF,eAAe,CAAC,GAAGU,WAAJ,CAAhB,CADM,GAEbP,mBAAmB,CAACH,eAAe,CAAC,GAAGU,WAAJ,CAAhB,CAFvB;AAGA,QAAME,KAAK,GAAGX,WAAW,CAACI,OAAD,EAAUM,QAAV,CAAzB;AACCC,EAAAA,KAAD,CAAqBC,QAArB,GAAgCJ,cAAc,CAACK,GAAf,CAAmBR,QAAnB,CAAhC,CAPmE,CAQnE;;AACA,SAAOM,KAAP;AACD,CAVD;;AAYA,MAAMG,OAAO,GAAGhB,aAAa,CAACQ,cAAD,EAAiB;AAC5CS,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { Context, createWrapper, MakeStore } from 'next-redux-wrapper';\r\nimport { applyMiddleware, createStore, compose, Store } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware, { Task } from 'redux-saga';\r\nimport reducer, { RootState } from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nexport interface SagaStore extends Store {\r\n  sagaTask: Task;\r\n  err: {\r\n    statusCode: Error;\r\n  };\r\n}\r\n\r\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n//   console.log(action);\r\n//   return next(action);\r\n// };\r\n\r\nconst configureStore: MakeStore<RootState> = ( context: Context ) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, /* loggerMiddleware */];\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : composeWithDevTools(applyMiddleware(...middlewares));\r\n  const store = createStore(reducer, enhancer);\r\n  (store as SagaStore).sagaTask = sagaMiddleware.run(rootSaga);\r\n  // ( store as SagaStore ).sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}